#!/bin/bash

# JPVIET Audio Creator Script
# T·∫°o file audio MP3 cho t·ª´ v·ª±ng ti·∫øng Nh·∫≠t

echo "üéµ JPVIET Audio Creator"
echo "========================"

# Ki·ªÉm tra th∆∞ m·ª•c audio
AUDIO_DIR="audio"
if [ ! -d "$AUDIO_DIR" ]; then
    echo "üìÅ T·∫°o th∆∞ m·ª•c audio..."
    mkdir -p "$AUDIO_DIR"
fi

# Ki·ªÉm tra file vocab.json
VOCAB_FILE="data/vocab.json"
if [ ! -f "$VOCAB_FILE" ]; then
    echo "‚ùå Kh√¥ng t√¨m th·∫•y file $VOCAB_FILE"
    exit 1
fi

# H√†m t·∫°o audio s·ª≠ d·ª•ng curl
create_audio_curl() {
    local text="$1"
    local filename="$2"
    
    echo "üé§ ƒêang t·∫°o audio cho: $text"
    
    # S·ª≠ d·ª•ng Google TTS
    local url="https://translate.google.com/translate_tts"
    local params="ie=UTF-8&q=$text&tl=ja&client=tw-ob&total=1&idx=0"
    
    if curl -s -L -o "$AUDIO_DIR/$filename" "$url?$params" --user-agent "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"; then
        echo "‚úÖ ƒê√£ t·∫°o: $filename"
        return 0
    else
        echo "‚ùå L·ªói khi t·∫°o: $filename"
        return 1
    fi
}

# H√†m t·∫°o audio s·ª≠ d·ª•ng wget
create_audio_wget() {
    local text="$1"
    local filename="$2"
    
    echo "üé§ ƒêang t·∫°o audio cho: $text"
    
    # S·ª≠ d·ª•ng Google TTS
    local url="https://translate.google.com/translate_tts"
    local params="ie=UTF-8&q=$text&tl=ja&client=tw-ob&total=1&idx=0"
    
    if wget -q -O "$AUDIO_DIR/$filename" "$url?$params" --user-agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"; then
        echo "‚úÖ ƒê√£ t·∫°o: $filename"
        return 0
    else
        echo "‚ùå L·ªói khi t·∫°o: $filename"
        return 1
    fi
}

# H√†m t·∫°o audio s·ª≠ d·ª•ng say (macOS)
create_audio_say() {
    local text="$1"
    local filename="$2"
    
    echo "üé§ ƒêang t·∫°o audio cho: $text"
    
    if say -v "Kyoko" -o "$AUDIO_DIR/$filename" "$text"; then
        echo "‚úÖ ƒê√£ t·∫°o: $filename"
        return 0
    else
        echo "‚ùå L·ªói khi t·∫°o: $filename"
        return 1
    fi
}

# H√†m t·∫°o audio s·ª≠ d·ª•ng espeak
create_audio_espeak() {
    local text="$1"
    local filename="$2"
    
    echo "üé§ ƒêang t·∫°o audio cho: $text"
    
    if espeak -v ja -s 150 -p 50 -w "$AUDIO_DIR/$filename" "$text"; then
        echo "‚úÖ ƒê√£ t·∫°o: $filename"
        return 0
    else
        echo "‚ùå L·ªói khi t·∫°o: $filename"
        return 1
    fi
}

# H√†m ch·ªçn ph∆∞∆°ng ph√°p t·∫°o audio
select_audio_method() {
    echo ""
    echo "üìã Ch·ªçn ph∆∞∆°ng ph√°p t·∫°o audio:"
    echo "1. curl (Google TTS)"
    echo "2. wget (Google TTS)"
    echo "3. say (macOS)"
    echo "4. espeak (Linux)"
    echo "5. Tho√°t"
    
    read -p "üëâ Ch·ªçn t√πy ch·ªçn (1-5): " choice
    
    case $choice in
        1) echo "üöÄ S·ª≠ d·ª•ng curl v·ªõi Google TTS"; return "curl" ;;
        2) echo "üöÄ S·ª≠ d·ª•ng wget v·ªõi Google TTS"; return "wget" ;;
        3) echo "üçé S·ª≠ d·ª•ng say (macOS)"; return "say" ;;
        4) echo "üêß S·ª≠ d·ª•ng espeak (Linux)"; return "espeak" ;;
        5) echo "üëã T·∫°m bi·ªát!"; exit 0 ;;
        *) echo "‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!"; select_audio_method ;;
    esac
}

# H√†m t·∫°o t·∫•t c·∫£ audio files
create_all_audio() {
    local method="$1"
    
    echo ""
    echo "üìö ƒêang t·∫£i d·ªØ li·ªáu t·ª´ v·ª±ng..."
    
    # ƒê·ªçc vocab.json v√† tr√≠ch xu·∫•t kana
    local vocab_list=$(jq -r '.[] | select(.kana != null and .kana != "") | .kana' "$VOCAB_FILE" 2>/dev/null)
    
    if [ -z "$vocab_list" ]; then
        echo "‚ùå Kh√¥ng th·ªÉ ƒë·ªçc d·ªØ li·ªáu t·ª´ v·ª±ng"
        return 1
    fi
    
    local total=$(echo "$vocab_list" | wc -l)
    local current=0
    local success=0
    
    echo "üéØ T√¨m th·∫•y $total t·ª´ v·ª±ng"
    echo "üéµ S·ª≠ d·ª•ng ph∆∞∆°ng ph√°p: $method"
    echo "----------------------------------------"
    
    while IFS= read -r kana; do
        [ -z "$kana" ] && continue
        
        current=$((current + 1))
        echo "[$current/$total] $kana"
        
        # T·∫°o t√™n file an to√†n
        local safe_kana=$(echo "$kana" | sed 's/[^a-zA-Z0-9„ÅÇ„ÅÑ„ÅÜ„Åà„Åä]/_/g')
        local filename="${safe_kana}.mp3"
        
        # Ki·ªÉm tra file ƒë√£ t·ªìn t·∫°i
        if [ -f "$AUDIO_DIR/$filename" ]; then
            echo "‚è≠Ô∏è  File ƒë√£ t·ªìn t·∫°i: $filename"
            success=$((success + 1))
            continue
        fi
        
        # T·∫°o audio theo ph∆∞∆°ng ph√°p ƒë√£ ch·ªçn
        case $method in
            "curl") create_audio_curl "$kana" "$filename" && success=$((success + 1)) ;;
            "wget") create_audio_wget "$kana" "$filename" && success=$((success + 1)) ;;
            "say") create_audio_say "$kana" "$filename" && success=$((success + 1)) ;;
            "espeak") create_audio_espeak "$kana" "$filename" && success=$((success + 1)) ;;
        esac
        
        # Delay ƒë·ªÉ tr√°nh spam API
        if [ "$method" = "curl" ] || [ "$method" = "wget" ]; then
            sleep 1
        fi
        
        echo ""
    done <<< "$vocab_list"
    
    echo "----------------------------------------"
    echo "üéâ Ho√†n th√†nh! $success/$total audio files"
}

# H√†m li·ªát k√™ file audio
list_audio_files() {
    echo ""
    echo "üìÅ Li·ªát k√™ file audio:"
    echo "----------------------"
    
    if [ -z "$(ls -A $AUDIO_DIR/*.mp3 2>/dev/null)" ]; then
        echo "‚ùå Kh√¥ng c√≥ file audio n√†o"
        return
    fi
    
    local count=0
    for file in "$AUDIO_DIR"/*.mp3; do
        if [ -f "$file" ]; then
            local size=$(du -h "$file" | cut -f1)
            echo "üìÅ $(basename "$file") ($size)"
            count=$((count + 1))
        fi
    done
    
    echo "----------------------"
    echo "üéµ T·ªïng c·ªông: $count file audio"
}

# H√†m c·∫≠p nh·∫≠t vocab.json
update_vocab_audio() {
    echo ""
    echo "üîÑ C·∫≠p nh·∫≠t vocab.json..."
    
    if ! command -v jq &> /dev/null; then
        echo "‚ùå C·∫ßn c√†i ƒë·∫∑t jq ƒë·ªÉ c·∫≠p nh·∫≠t vocab.json"
        echo "   Ubuntu/Debian: sudo apt install jq"
        echo "   macOS: brew install jq"
        return 1
    fi
    
    # Backup file c≈©
    if [ ! -f "${VOCAB_FILE}.backup" ]; then
        cp "$VOCAB_FILE" "${VOCAB_FILE}.backup"
        echo "üíæ ƒê√£ backup: ${VOCAB_FILE}.backup"
    fi
    
    # C·∫≠p nh·∫≠t audio field cho m·ªói vocab
    local temp_file=$(mktemp)
    jq '.[] | .audio = (.kana | gsub("[^a-zA-Z0-9„ÅÇ„ÅÑ„ÅÜ„Åà„Åä]"; "_")) + ".mp3"' "$VOCAB_FILE" > "$temp_file"
    
    if [ $? -eq 0 ]; then
        mv "$temp_file" "$VOCAB_FILE"
        echo "‚úÖ ƒê√£ c·∫≠p nh·∫≠t $VOCAB_FILE"
    else
        echo "‚ùå L·ªói khi c·∫≠p nh·∫≠t vocab.json"
        rm -f "$temp_file"
    fi
}

# H√†m d·ªçn d·∫πp file audio
clean_audio_files() {
    echo ""
    echo "üßπ D·ªçn d·∫πp file audio..."
    
    # ƒê·ªçc danh s√°ch audio ƒë∆∞·ª£c s·ª≠ d·ª•ng t·ª´ vocab.json
    local used_audio=$(jq -r '.[] | select(.audio != null and .audio != "") | .audio' "$VOCAB_FILE" 2>/dev/null)
    
    if [ -z "$used_audio" ]; then
        echo "‚ùå Kh√¥ng th·ªÉ ƒë·ªçc danh s√°ch audio ƒë∆∞·ª£c s·ª≠ d·ª•ng"
        return 1
    fi
    
    # T√¨m file audio kh√¥ng s·ª≠ d·ª•ng
    local unused_files=()
    for file in "$AUDIO_DIR"/*.mp3; do
        if [ -f "$file" ]; then
            local basename_file=$(basename "$file")
            if ! echo "$used_audio" | grep -q "^$basename_file$"; then
                unused_files+=("$file")
            fi
        fi
    done
    
    if [ ${#unused_files[@]} -eq 0 ]; then
        echo "‚ÑπÔ∏è  Kh√¥ng c√≥ file audio n√†o kh√¥ng s·ª≠ d·ª•ng"
        return
    fi
    
    echo "üóëÔ∏è  T√¨m th·∫•y ${#unused_files[@]} file audio kh√¥ng s·ª≠ d·ª•ng:"
    for file in "${unused_files[@]}"; do
        echo "  - $(basename "$file")"
    done
    
    read -p "‚ùì B·∫°n c√≥ mu·ªën x√≥a c√°c file n√†y? (y/N): " confirm
    if [[ $confirm =~ ^[Yy]$ ]]; then
        local deleted=0
        for file in "${unused_files[@]}"; do
            if rm "$file"; then
                echo "üóëÔ∏è  ƒê√£ x√≥a: $(basename "$file")"
                deleted=$((deleted + 1))
            else
                echo "‚ùå L·ªói khi x√≥a: $(basename "$file")"
            fi
        done
        echo "‚úÖ ƒê√£ x√≥a $deleted file audio"
    else
        echo "‚ùå ƒê√£ h·ªßy x√≥a file"
    fi
}

# Main menu
main_menu() {
    while true; do
        echo ""
        echo "üìã Menu ch√≠nh:"
        echo "1. T·∫°o audio files"
        echo "2. Li·ªát k√™ file audio"
        echo "3. C·∫≠p nh·∫≠t vocab.json"
        echo "4. D·ªçn d·∫πp file audio"
        echo "5. Tho√°t"
        
        read -p "üëâ Ch·ªçn t√πy ch·ªçn (1-5): " choice
        
        case $choice in
            1)
                method=$(select_audio_method)
                create_all_audio "$method"
                ;;
            2)
                list_audio_files
                ;;
            3)
                update_vocab_audio
                ;;
            4)
                clean_audio_files
                ;;
            5)
                echo "üëã T·∫°m bi·ªát!"
                exit 0
                ;;
            *)
                echo "‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!"
                ;;
        esac
    done
}

# Ki·ªÉm tra dependencies
check_dependencies() {
    echo "üîç Ki·ªÉm tra dependencies..."
    
    local missing_deps=()
    
    # Ki·ªÉm tra jq
    if ! command -v jq &> /dev/null; then
        missing_deps+=("jq")
    fi
    
    # Ki·ªÉm tra √≠t nh·∫•t m·ªôt ph∆∞∆°ng ph√°p t·∫°o audio
    if ! command -v curl &> /dev/null && ! command -v wget &> /dev/null && ! command -v say &> /dev/null && ! command -v espeak &> /dev/null; then
        missing_deps+=("audio_tool")
    fi
    
    if [ ${#missing_deps[@]} -gt 0 ]; then
        echo "‚ö†Ô∏è  Thi·∫øu dependencies:"
        for dep in "${missing_deps[@]}"; do
            case $dep in
                "jq")
                    echo "   - jq: C·∫ßn ƒë·ªÉ x·ª≠ l√Ω JSON"
                    echo "     Ubuntu/Debian: sudo apt install jq"
                    echo "     macOS: brew install jq"
                    ;;
                "audio_tool")
                    echo "   - C·∫ßn √≠t nh·∫•t m·ªôt c√¥ng c·ª• t·∫°o audio:"
                    echo "     - curl ho·∫∑c wget: Google TTS"
                    echo "     - say: macOS Text-to-Speech"
                    echo "     - espeak: Linux Text-to-Speech"
                    ;;
            esac
        done
        echo ""
        read -p "‚ùì Ti·∫øp t·ª•c? (y/N): " continue_choice
        if [[ ! $continue_choice =~ ^[Yy]$ ]]; then
            exit 1
        fi
    else
        echo "‚úÖ T·∫•t c·∫£ dependencies ƒë√£ s·∫µn s√†ng"
    fi
}

# Ch·∫°y script
check_dependencies
main_menu
