#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
JPVIET Audio Creator
T·∫°o file audio MP3 cho t·ª´ v·ª±ng ti·∫øng Nh·∫≠t
"""

import json
import os
import time
from pathlib import Path
import requests
from urllib.parse import quote

class JPVIETAudioCreator:
    def __init__(self):
        self.audio_dir = Path("audio")
        self.vocab_file = Path("data/vocab.json")
        self.audio_dir.mkdir(exist_ok=True)
        
    def load_vocab(self):
        """T·∫£i d·ªØ li·ªáu t·ª´ v·ª±ng t·ª´ JSON"""
        try:
            with open(self.vocab_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y file {self.vocab_file}")
            return []
        except json.JSONDecodeError:
            print(f"‚ùå L·ªói ƒë·ªçc file JSON {self.vocab_file}")
            return []
    
    def create_audio_google_tts(self, text, filename):
        """T·∫°o audio s·ª≠ d·ª•ng Google Text-to-Speech API"""
        try:
            # Google TTS URL
            url = "https://translate.google.com/translate_tts"
            
            params = {
                'ie': 'UTF-8',
                'q': text,
                'tl': 'ja',  # Japanese
                'client': 'tw-ob',
                'total': '1',
                'idx': '0'
            }
            
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
            
            response = requests.get(url, params=params, headers=headers)
            
            if response.status_code == 200:
                audio_path = self.audio_dir / filename
                with open(audio_path, 'wb') as f:
                    f.write(response.content)
                print(f"‚úÖ ƒê√£ t·∫°o: {filename}")
                return True
            else:
                print(f"‚ùå L·ªói API: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå L·ªói khi t·∫°o audio: {e}")
            return False
    
    def create_audio_azure_tts(self, text, filename):
        """T·∫°o audio s·ª≠ d·ª•ng Azure Text-to-Speech (c·∫ßn API key)"""
        # Azure TTS implementation
        # C·∫ßn subscription key v√† region
        pass
    
    def create_audio_offline(self, text, filename):
        """T·∫°o audio offline s·ª≠ d·ª•ng espeak ho·∫∑c festival"""
        try:
            import subprocess
            
            # S·ª≠ d·ª•ng espeak n·∫øu c√≥
            audio_path = self.audio_dir / filename
            
            # Th·ª≠ espeak tr∆∞·ªõc
            try:
                cmd = [
                    'espeak', 
                    '-v', 'ja',  # Japanese voice
                    '-s', '150',  # Speed
                    '-p', '50',   # Pitch
                    '-w', str(audio_path),  # Output file
                    text
                ]
                subprocess.run(cmd, check=True, capture_output=True)
                print(f"‚úÖ ƒê√£ t·∫°o (espeak): {filename}")
                return True
            except (subprocess.CalledProcessError, FileNotFoundError):
                pass
            
            # Th·ª≠ festival n·∫øu espeak kh√¥ng c√≥
            try:
                script_content = f'(utt.save (Utterance Text "{text}") "{audio_path}")'
                cmd = ['festival', '--batch', '--eval', script_content]
                subprocess.run(cmd, check=True, capture_output=True)
                print(f"‚úÖ ƒê√£ t·∫°o (festival): {filename}")
                return True
            except (subprocess.CalledProcessError, FileNotFoundError):
                pass
            
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y espeak ho·∫∑c festival")
            return False
            
        except Exception as e:
            print(f"‚ùå L·ªói khi t·∫°o audio offline: {e}")
            return False
    
    def create_audio_files(self, method='google'):
        """T·∫°o audio files cho t·∫•t c·∫£ t·ª´ v·ª±ng"""
        vocab_data = self.load_vocab()
        
        if not vocab_data:
            print("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu t·ª´ v·ª±ng")
            return
        
        print(f"üìö T√¨m th·∫•y {len(vocab_data)} t·ª´ v·ª±ng")
        print(f"üéµ S·ª≠ d·ª•ng ph∆∞∆°ng ph√°p: {method}")
        print("-" * 50)
        
        success_count = 0
        total_count = len(vocab_data)
        
        for i, vocab in enumerate(vocab_data, 1):
            kana = vocab.get('kana', '')
            if not kana:
                continue
                
            # T·∫°o t√™n file
            safe_kana = "".join(c for c in kana if c.isalnum() or c in ('„ÅÇ', '„ÅÑ', '„ÅÜ', '„Åà', '„Åä'))
            filename = f"{safe_kana}.mp3"
            
            print(f"[{i}/{total_count}] {kana} -> {filename}")
            
            # Ki·ªÉm tra file ƒë√£ t·ªìn t·∫°i
            if (self.audio_dir / filename).exists():
                print(f"‚è≠Ô∏è  File ƒë√£ t·ªìn t·∫°i: {filename}")
                success_count += 1
                continue
            
            # T·∫°o audio
            if method == 'google':
                success = self.create_audio_google_tts(kana, filename)
            elif method == 'offline':
                success = self.create_audio_offline(kana, filename)
            else:
                print(f"‚ùå Ph∆∞∆°ng ph√°p kh√¥ng h·ªó tr·ª£: {method}")
                continue
            
            if success:
                success_count += 1
            
            # Delay ƒë·ªÉ tr√°nh spam API
            if method == 'google':
                time.sleep(1)
            
            print()
        
        print("-" * 50)
        print(f"üéâ Ho√†n th√†nh! {success_count}/{total_count} audio files")
        
        # C·∫≠p nh·∫≠t vocab.json v·ªõi t√™n file audio
        self.update_vocab_audio_files()
    
    def update_vocab_audio_files(self):
        """C·∫≠p nh·∫≠t vocab.json v·ªõi t√™n file audio"""
        try:
            vocab_data = self.load_vocab()
            updated = False
            
            for vocab in vocab_data:
                kana = vocab.get('kana', '')
                if not kana:
                    continue
                
                # T·∫°o t√™n file
                safe_kana = "".join(c for c in kana if c.isalnum() or c in ('„ÅÇ', '„ÅÑ', '„ÅÜ', '„Åà', '„Åä'))
                filename = f"{safe_kana}.mp3"
                
                # Ki·ªÉm tra file t·ªìn t·∫°i
                if (self.audio_dir / filename).exists():
                    if vocab.get('audio') != filename:
                        vocab['audio'] = filename
                        updated = True
                else:
                    if vocab.get('audio'):
                        vocab['audio'] = ""
                        updated = True
            
            if updated:
                # Backup file c≈©
                backup_file = self.vocab_file.with_suffix('.json.backup')
                if not backup_file.exists():
                    with open(self.vocab_file, 'r', encoding='utf-8') as f:
                        backup_content = f.read()
                    with open(backup_file, 'w', encoding='utf-8') as f:
                        f.write(backup_content)
                    print(f"üíæ ƒê√£ backup: {backup_file}")
                
                # Ghi file m·ªõi
                with open(self.vocab_file, 'w', encoding='utf-8') as f:
                    json.dump(vocab_data, f, ensure_ascii=False, indent=2)
                
                print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t {self.vocab_file}")
            else:
                print(f"‚ÑπÔ∏è  Kh√¥ng c·∫ßn c·∫≠p nh·∫≠t {self.vocab_file}")
                
        except Exception as e:
            print(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t vocab.json: {e}")
    
    def list_audio_files(self):
        """Li·ªát k√™ c√°c file audio ƒë√£ t·∫°o"""
        audio_files = list(self.audio_dir.glob("*.mp3"))
        
        if not audio_files:
            print("‚ùå Kh√¥ng c√≥ file audio n√†o")
            return
        
        print(f"üéµ T√¨m th·∫•y {len(audio_files)} file audio:")
        print("-" * 30)
        
        for audio_file in sorted(audio_files):
            size = audio_file.stat().st_size
            size_kb = size / 1024
            print(f"üìÅ {audio_file.name} ({size_kb:.1f} KB)")
    
    def clean_audio_files(self):
        """X√≥a c√°c file audio kh√¥ng s·ª≠ d·ª•ng"""
        vocab_data = self.load_vocab()
        used_audio = set()
        
        # L·∫•y danh s√°ch audio ƒë∆∞·ª£c s·ª≠ d·ª•ng
        for vocab in vocab_data:
            audio = vocab.get('audio', '')
            if audio:
                used_audio.add(audio)
        
        # T√¨m file audio kh√¥ng s·ª≠ d·ª•ng
        all_audio_files = set(f.name for f in self.audio_dir.glob("*.mp3"))
        unused_audio = all_audio_files - used_audio
        
        if not unused_audio:
            print("‚ÑπÔ∏è  Kh√¥ng c√≥ file audio n√†o kh√¥ng s·ª≠ d·ª•ng")
            return
        
        print(f"üóëÔ∏è  T√¨m th·∫•y {len(unused_audio)} file audio kh√¥ng s·ª≠ d·ª•ng:")
        for audio in sorted(unused_audio):
            print(f"  - {audio}")
        
        # X√°c nh·∫≠n x√≥a
        confirm = input("\n‚ùì B·∫°n c√≥ mu·ªën x√≥a c√°c file n√†y? (y/N): ")
        if confirm.lower() == 'y':
            deleted_count = 0
            for audio in unused_audio:
                try:
                    (self.audio_dir / audio).unlink()
                    print(f"üóëÔ∏è  ƒê√£ x√≥a: {audio}")
                    deleted_count += 1
                except Exception as e:
                    print(f"‚ùå L·ªói khi x√≥a {audio}: {e}")
            
            print(f"‚úÖ ƒê√£ x√≥a {deleted_count} file audio")
        else:
            print("‚ùå ƒê√£ h·ªßy x√≥a file")

def main():
    """Main function"""
    print("üéµ JPVIET Audio Creator")
    print("=" * 40)
    
    creator = JPVIETAudioCreator()
    
    while True:
        print("\nüìã Menu:")
        print("1. T·∫°o audio files (Google TTS)")
        print("2. T·∫°o audio files (Offline)")
        print("3. Li·ªát k√™ file audio")
        print("4. C·∫≠p nh·∫≠t vocab.json")
        print("5. D·ªçn d·∫πp file audio")
        print("6. Tho√°t")
        
        choice = input("\nüëâ Ch·ªçn t√πy ch·ªçn (1-6): ").strip()
        
        if choice == '1':
            print("\nüöÄ T·∫°o audio files s·ª≠ d·ª•ng Google TTS...")
            creator.create_audio_files(method='google')
            
        elif choice == '2':
            print("\nüíª T·∫°o audio files offline...")
            creator.create_audio_files(method='offline')
            
        elif choice == '3':
            print("\nüìÅ Li·ªát k√™ file audio...")
            creator.list_audio_files()
            
        elif choice == '4':
            print("\nüîÑ C·∫≠p nh·∫≠t vocab.json...")
            creator.update_vocab_audio_files()
            
        elif choice == '5':
            print("\nüßπ D·ªçn d·∫πp file audio...")
            creator.clean_audio_files()
            
        elif choice == '6':
            print("\nüëã T·∫°m bi·ªát!")
            break
            
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")

if __name__ == "__main__":
    main()
